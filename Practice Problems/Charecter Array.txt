














#include <iostream>
using namespace std;


int character_array_input (char[]);
void character_array_initialize (char[], int);
int is_equal (char[], char[], int );
void character_array_reverse_print (char [], char[], int );
int number_of_alphabets(char[],int);
int number_of_numbers(char[],int);
int number_of_symbols(char[],int);

int is_paliandrom (char a[], int n);

int main() 
{
	char a[100];
	int string_length_a,alphabets,symbols,digits;
	
		
	character_array_initialize(a , 100);
	
	
	string_length_a= character_array_input(a);
	
	
	alphabets=number_of_alphabets(a,string_length_a);
	digits=number_of_numbers(a,string_length_a);
	symbols=number_of_symbols(a,string_length_a);
	
	if(is_paliandrom(a,string_length_a)==1){
		
		cout<<a<<" is not a paliandrom. ";
	}
	
	else{
		cout<<a<<" is a paliandrom. ";
	}
  
  	cout<<"the number of alphabets are :"<<alphabets<<endl;
  	cout<<"the number of digits are :"<<digits<<endl;
  	cout<<"the number of symbols are :"<<symbols;
  	
  	
  
  return 0;
}

int is_paliandrom (char a[], int n){
	
	char b[100];
	
	int paliandrom;
	
	character_array_initialize(b , 100);
	
	character_array_reverse_print(a,b,n);
	
	paliandrom=is_equal(a,b,n);
	
	
	return paliandrom;
}

int character_array_input (char x[]){
	
	int length;
	
	cout<<"Enter an string: ";
	cin>>x;
	
	length=0;
	while(x[length] != '\0'){
		length=length+1;
	}
	
	
	return length;
}




void character_array_initialize (char c[], int n){
	
	int i;
	
	
	for(i=0; i<n; i++){
		c[i]='\0';
		}
	
	
}

int is_equal (char a[], char b[], int n){
	
	int i,equal;
	
	equal=0;
	
	for(i=0; i<n; i++){
		if(a[i]!=b[i]){
			equal=1;
		}
	}
	
	return equal;
}


void character_array_reverse_print (char a[],char b[], int n){
	
	int i;
	for(i=0; i<n; i++){
		b[i]=a[(n-1)-i];
	}
}

int number_of_alphabets(char x[],int n){
	
	int i,sum;
	
	sum=0;
	for(i=0; i<n; i++){
		if((x[i]>='a' && x[i]<='z') || (x[i]>='A' && x[i]<='Z')){
			sum=sum+1;
			
		}
	}
	
return sum;	
	
}



int number_of_numbers(char x[],int n){
	
	int i,sum;
	
	sum=0;
	for(i=0; i<n; i++){
		if(x[i]>='0' && x[i]<='9') {
			sum=sum+1;
			
		}
	}
	
return sum;	


}

int number_of_symbols(char x[],int n){
	
	int alphabets,digits,symbols;
	
	alphabets=number_of_alphabets(x,n);
	digits=number_of_numbers(x,n);
	symbols=n-(alphabets + digits);
	
	
return symbols;	


}


















				reverse the letters



#include <iostream>

using namespace std;
int character_array_input (char[]);
void character_array_initialize (char[], int);
void character_array_reverse_initialize (char[], int);

int main() 
{
	char a[100];
	int string_length;
	
		
	character_array_initialize(a , 100);
	
	string_length = character_array_input(a);
	
	cout<<"number of alphabets:"<<string_length<<"  and they are:"<<a<<endl;
	cout<<"In reverse : ";
	character_array_reverse_initialize(a,string_length);
  
  return 0;
}



int character_array_input (char x[]){
	
	int length;
	
	cout<<"Enter an string: ";
	cin>>x;
	
	length=0;
	while(x[length] != '\0'){
		length=length+1;
	}
	
	
	return length;
}




void character_array_initialize (char c[], int n){
	
	int i;
	
	
	for(i=0; i<n; i++){
		c[i]='\0';
		}
	
	
}



void character_array_reverse_initialize (char c[], int n){
	
	int i;
	for(i=n-1;i>=0;i--){
		cout<<c[i];
	}
}
















        EQUAL CHARECTER FUNCTION






#include <iostream>

using namespace std;
int character_array_input (char[]);
void character_array_initialize (char[], int);
int is_equal (char[], char[], int );

int main() 
{
	char a[100],b[100];
	int string_length_a,string_length_b;
	
		
	character_array_initialize(a , 100);
	character_array_initialize(b , 100);
	
	string_length_a= character_array_input(a);
	string_length_b=character_array_input(b);
	
	if(string_length_b<string_length_a){
		swap(string_length_a,string_length_b);
	
	}
	
	cout<<string_length_b<<endl;
	
	if(is_equal(a,b,string_length_b)==1){
		
		cout<<a<<"is not equal to "<<b;
	}
	
	else{
		cout<<a<<"is  equal to "<<b;
	}
  
  return 0;
}



int character_array_input (char x[]){
	
	int length;
	
	cout<<"Enter an string: ";
	cin>>x;
	
	length=0;
	while(x[length] != '\0'){
		length=length+1;
	}
	
	
	return length;
}




void character_array_initialize (char c[], int n){
	
	int i;
	
	
	for(i=0; i<n; i++){
		c[i]='\0';
		}
	
	
}

int is_equal (char a[], char b[], int n){
	
	int i,equal;
	
	equal=0;
	
	for(i=0; i<n; i++){
		if(a[i]!=b[i]){
			equal=1;
		}
	}
	
	return equal;
}







                         PALIANDROM








#include <iostream>

using namespace std;
int character_array_input (char[]);
void character_array_initialize (char[], int);
int is_equal (char[], char[], int );
void character_array_reverse_print (char [], char[], int n);



int main() 
{
	char a[100],b[100];
	int string_length_a,string_length_b;
	
		
	character_array_initialize(a , 100);
	character_array_initialize(b , 100);
	
	string_length_a= character_array_input(a);
	character_array_reverse_print(a,b,string_length_a);
	
	if(is_equal(a,b,string_length_a)==1){
		
		cout<<a<<" is not a paliandrom. ";
	}
	
	else{
		cout<<a<<" is a paliandrom. ";
	}
  
  return 0;
}



int character_array_input (char x[]){
	
	int length;
	
	cout<<"Enter an string: ";
	cin>>x;
	
	length=0;
	while(x[length] != '\0'){
		length=length+1;
	}
	
	
	return length;
}




void character_array_initialize (char c[], int n){
	
	int i;
	
	
	for(i=0; i<n; i++){
		c[i]='\0';
		}
	
	
}

int is_equal (char a[], char b[], int n){
	
	int i,equal;
	
	equal=0;
	
	for(i=0; i<n; i++){
		if(a[i]!=b[i]){
			equal=1;
		}
	}
	
	return equal;
}


void character_array_reverse_print (char a[],char b[], int n){
	
	int i;
	for(i=0; i<n; i++){
		b[i]=a[(n-1)-i];
	}
}



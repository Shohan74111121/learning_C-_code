
                     E^X ER MAN WITH FACTORIAL AND POWER






#include <iostream>
using namespace std;


// function declaration or function prototyping 
int factorial (int ); // this cunction calculates factorial of 'n' as: result = factorial(n); 
float power (float, int);//


int main(){

    int i, n, fac;
    float x, term, sum, po;

    cout << "Enter value of x: ";
    cin >> x;
    cout << "Enter Pricision of calculation n(<10): ";
    cin >> n;

    sum = 0;
    for(i = 0; i <= n; i = i + 1){
// using the funcitons or calling the function or function calling
        po = power(x,i);
        fac = factorial(i);

        term =  po/fac ;
        sum = sum + term;
    }

    cout << "e^" << x << " = "<< sum;

    return 0;
}


// funtion defination or defining the function 
int factorial (int n){
    int i, f;


    f = 1;
    for(i = 1; i <= n; i=i+1){
        f = f * i;
    }

    return f;
}




float power (float x, int y){
    int i;
    float  p;


    p = 1;
    for(i = 1; i <= y; i = i+1){
        p = p * x;
    }

    return p;
}



















#include<iostream>
using namespace std;


void array_1D_input(int [], int);
void array_1D_print(int [], int);


int array_1D_max_index(int [], int); // find the index of maximum value in the array
int array_1D_min_index(int [], int); // find the index of minimum value in the array
int array_1D_search(int [], int, int); // find x in the the array y
int array_1D_search_index(int [], int, int);// find x in array y, if missing return -1
int array_1D_search_frequency(int [], int, int);// find x in array y, if missing return -1
int array_1D_search_frequency_index(int [], int, int, int []);// find x in array y, if missing return -1
int array_1D_search_prime(int [], int);// find x in array y, if missing return -1
int array_1D_search_prime_index(int [], int, int []);// find x in array y, if missing return -1


int int2digits(int, int[]); // foncert an integer into its digits into an array and return number of digits


void array_1D_bubble_Sort(int [], int, char);
void array_1D_selection_Sort(int [], int, char);


void vector_sum(int [], int [], int [], int); // add two vectors and copy into third vector


int array_1D_matching(int [], int [], int); // check if two arrays are equal nor not


float array_1D_average(int [], int); // calculate average of all elements of an array
float array_1D_variance(int [], int); // calculate variance of all elements of an array


int main(){


    int x[10], y[10], z [10], vector_size, freq, index[10], num;
    
    cout << "size of the vector (<10): ";
    cin >> vector_size;
    cout << "********Input X ********"<<endl;
    array_1D_input(x, vector_size);
    
    cout << "********Before sorting********"<<endl;
    array_1D_print(x,vector_size);
    cout << endl;
    
    array_1D_bubble_Sort(x, vector_size, 'a');
    cout << "********After assending sorting********"<<endl;
    array_1D_print(x,vector_size);
    cout << endl;
    
    array_1D_bubble_Sort(x, vector_size, 'd');
    cout << "********After desending sorting********"<<endl;
    array_1D_print(x,vector_size);
    cout << endl;
  
    return 0;
}


void array_1D_bubble_Sort(int a[], int n, char c){
    
    int i,j,temp;
    
    if (c == 'd'){
        for(i = 0; i < n-1; i = i + 1){
            for(j = 0; j < n-1; j = j + 1){
                if(a[j] < a[j+1]){
                    temp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = temp;
                }
            }
        }
    }
    else{
        for(i = 0; i < n-1; i = i + 1){
            for(j = 0; j < n-1; j = j + 1){
                if(a[j] > a[j+1]){
                    temp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = temp;
                }
            }
        }   
    }
}




void array_1D_input(int a[], int input_size){
    int i;
    
    for(i=0; i < input_size; i = i + 1){
        cout << "["<<i<<"]=";
        cin >> a[i];
    }
}


void array_1D_print(int a[], int input_size){
    int i;
    
    for(i=0; i < input_size; i = i + 1){
        cout << a[i] << " ";
    }
}


void vector_sum(int a[], int b[], int c[], int n){
    int i;
    for(i =0; i<n; i = i + 1 ){
        c[i] = a[i] + b[i];   
    }
}


float array_1D_average(int a[], int input_size){
    int i;
    float sum, average; 
    
    sum = 0;
    for(i=0; i < input_size; i = i + 1){
        sum = sum + a[i];
    }
    average = sum / input_size;
    
    return average;
}


int array_1D_search_frequency_index(int a[], int n, int p, int ind[]){
    int i, freq; 
    
    freq = 0; 
    for (i = 0; i < n; i = i + 1){
        if(a[i] == p){
            ind[freq] = i;  
            freq = freq + 1;
        }
    }
    return freq; 
}




int array_1D_search_index(int a[], int n, int p){
    int i, ind; 
    
    ind = -1; 
    for (i = 0; i < n; i = i + 1){
        if(a[i] == p){
            ind = i;
            break;
        }
    }
    return ind;
}


int array_1D_search(int a[], int n, int p){
    int i, found; 
    
    found = 0; 
    for (i = 0; i < n; i = i + 1){
        if(a[i] == p){
            found = 1;
            break;
        }
    }
    return found; 
}


int array_1D_search_frequency(int a[], int n, int p){
    int i, freq; 
    
    freq = 0; 
    for (i = 0; i < n; i = i + 1){
        if(a[i] == p){
            freq = freq + 1;
        }
    }
    return freq; 
}










int array_1D_max_index(int a[], int n){
    
    int i, max_ind; 
    
    max_ind = 0; 
    for (i = 1; i < n; i = i + 1){
        if(a[i] > a[max_ind]){
            max_ind = i;
        }
    }
    return max_ind; 
}


void array_1D_selection_Sort(int a[], int n){
    
    int i, j, max_ind, temp; 
    
    for(j = 0; j < n; j = j + 1){
        max_ind = j; 
        for (i = j + 1; i < n; i = i + 1){
            if(a[i] > a[max_ind]){
                max_ind = i;
            }
        }
        temp = a[j];
        a[j] = a[max_ind];
        a[max_ind] = temp;
    }    
}






















void array_2D_search_index(int a[10][10], int m, int n, int p, int ind[]){
    int i, j; 
    
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            if(a[i][j] == p){
               ind[0] = i;
               ind[1] = j;
            }
        }
    }
}




























#include <iostream>
using namespace std;


void array_1D_print(int [], int);


void array_2D_input(int [10][10], int, int);
void array_2D_print(int [10][10], int, int);
void array_2D_max_index(int [10][10], int, int, int[]);


int main()
{
    int x[10][10], m, n, index[2];
    
    cout << "Enter number of rows (<10): ";
    cin >> m;
    cout << "Enter number of columns (<10): ";
    cin >> n;
    
    array_2D_input(x, m, n);
    
    array_2D_max_index(x, m, n, index);
    
    cout << "Maximum value of the array: "<< endl;
    array_2D_print(x, m, n);
    cout << "is " << x[index[0]][index[1]] << " at location ";
    array_1D_print (index, 2);
    
    return 0;
}


void array_2D_max_index(int a[10][10], int m, int n, int ind[]){
    int i, j; 
    
    ind[0] = 0;
    ind[1] = 0;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            if(a[i][j] > a[ind[0]][ind[1]]){
               ind[0] = i;
               ind[1] = j;
            }
        }
    }
}


void array_2D_input(int a[10][10], int m, int n){
    int i, j;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            cout << "["<<i<<"]"<< "["<<j<<"]=";
            cin >> a[i][j];
        }
    }
}


void array_2D_print(int a[10][10], int m, int n){
   int i, j;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            cout << a[i][j] <<" ";
        }
        cout << endl;
    }
}


void array_1D_print(int a[], int input_size){
    int i;
    
    for(i=0; i < input_size; i = i + 1){
        cout << a[i] << " ";
    }
}











#include <iostream>
using namespace std;


int array_2D_search_prime(int [10][10], int, int);// find x in array y, if missing return -1
int array_2D_search_prime_index(int [10][10], int, int, int [10][10]);// find x in array y, if missing return -1








int array_1D_search_frequency(int [], int, int);// find x in array y, if missing return -1
void array_1D_print(int [], int);
void array_2D_print(int [10][10], int, int);
void array_2D_input(int [10][10], int, int);


void array_2D_max_index(int [10][10], int, int, int[]);
void array_2D_search_index(int [10][10], int, int, int, int[]);


int array_2D_search_frequency(int [10][10], int, int, int);
int convert_2D_1D(int [10][10], int, int, int[]);


int main()
{
    int x[10][10], m, n, p, y[100], sizeof_y, frequency;
    
    cout << "Enter number of rows (<10): ";
    cin >> m;
    cout << "Enter number of columns (<10): ";
    cin >> n;


    array_2D_input(x, m, n);
    
    sizeof_y = convert_2D_1D(x, m, n, y);
    
    frequency = array_1D_search_frequency(y, sizeof_y, 3);
    
    cout << " *************2D*********** "<< endl;
    array_2D_print(x, m, n);
    
    cout << " *************1D***********" << endl;
    array_1D_print(y, sizeof_y);
    cout << endl;
    cout << "Frequency of 3 is " << frequency;
    
    return 0;
}


int convert_2D_1D(int a[10][10], int m, int n, int b[]){
    int i, j, count; 
    
    count = 0;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
               b[count] = a[i][j];
               count = count + 1;
        }
    }
    return count;
}




int array_2D_search_frequency(int a[10][10], int m, int n, int p){
    
    int i, j, count; 
    
    count = 0;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            if(a[i][j] == p){
               count = count + 1;
            }
        }
    }
    return count;
}




void array_2D_search_index(int a[10][10], int m, int n, int p, int ind[]){
    int i, j; 
    
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            if(a[i][j] == p){
               ind[0] = i;
               ind[1] = j;
            }
        }
    }
}


void array_2D_input(int a[10][10], int m, int n){
    int i, j;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            cout << "["<<i<<"]"<< "["<<j<<"]=";
            cin >> a[i][j];
        }
    }
}


void array_2D_print(int a[10][10], int m, int n){
   int i, j;
    for (i = 0; i < m; i = i + 1){
        for(j = 0; j < n; j = j + 1){
            cout << a[i][j] <<" ";
        }
        cout << endl;
    }
}


void array_1D_print(int a[], int input_size){
    int i;
    
    for(i=0; i < input_size; i = i + 1){
        cout << a[i] << " ";
    }
}


int array_1D_search_frequency(int a[], int n, int p){
    int i, freq; 
    
    freq = 0; 
    for (i = 0; i < n; i = i + 1){
        if(a[i] == p){
            freq = freq + 1;
        }
    }
    return freq; 
}
































#include <iostream>
using namespace std;

void array_2D_Input(int [10][10], int, int);
void array_2D_Output(int [10][10], int, int);
int array_2D_Prime_Search(int [10][10], int[], int, int);
void array_Prime_Frequency_Output(int [], int);
void Print_From_2D_array_Index(int [10][10], int [], int);


int main()
{
    int arr1[10][10], index[20], n, m, prime_count;

    cout << "How many Rows(n<10): ";
    cin >> n;
    cout << "How many Columns(n<10): ";
    cin >> m;

    array_2D_Input(arr1, n, m);
    prime_count=array_2D_Prime_Search(arr1, index, n, m);

    cout << "Entered array.";
    cout << endl;
    array_2D_Output(arr1, n, m);
    cout << endl;

    cout << "Total prime numbers: " << prime_count << endl;
    cout << "Indexes are: " << endl;
    array_Prime_Frequency_Output(index, prime_count);
    cout << endl;

    cout << "Numbers are: " << endl;
    Print_From_2D_array_Index(arr1, index, prime_count);
    cout << endl;

    return 0;
}

void array_2D_Input(int x[10][10], int rows, int columns){
    int i, j;

    for(i=0; i<rows; i=i+1){
        for(j=0; j<columns; j=j+1){
            cout << "[" << i << "][" << j << "] = ";
            cin >> x[i][j];
        }
    }
    cout << endl;
}

void array_2D_Output(int x[10][10], int rows, int columns){
    int i, j;

    for(i=0; i<rows; i=i+1){
        for(j=0; j<columns; j=j+1){
            cout << x[i][j] << " ";
        }
        cout << endl;
    }
}

int array_2D_Prime_Search(int x[10][10], int index[], int row, int column){

    int i, j, k, ind1, ind2, primr_count;
    bool  prime_check;

    ind1=0;
    ind2=1;
    primr_count=0;
    for(i=0; i<row; i=i+1){
        for(j=0; j<column; j=j+1){

            prime_check=true;
            if(x[i][j]==0 || x[i][j]==1){
                prime_check=false;
            }
            else{
                for(k=2; k<x[i][j]; k=k+1){

                    if(x[i][j]%k==0){
                        prime_check=false;
                    }
                }
            }

            if(prime_check==true){
                index[ind1]=i;
                index[ind2]=j;

                primr_count=primr_count+1;

                ind1=ind2+1;
                ind2=ind1+1;
            }
        }
    }
    return primr_count;
}

void array_Prime_Frequency_Output(int x[], int x_size ){
    int i, line;

    line=0;
    x_size=(x_size*2);
    for(i=0; i<x_size; i=i+1){
        cout << x[i] << " ";
        line=line+1;

        if(line%2==0){
            cout << endl;
        }
    }
}

void Print_From_2D_array_Index(int x[10][10], int dig[], int x_size){

    int i, j, dig1, dig2;

    dig1=0;
    dig2=1;
    x_size=(x_size*2);
    for(i=0; i<x_size; i=i+1){

        cout << x[dig[dig1]] [dig[dig2]] << "  ";

        dig1=dig2+1;
        dig2=dig1+1;
    }

}

















sum of prime number and the 1st prime number with location











#include <iostream>
using namespace std;


void array_1D_print(int [], int );
void array_2d_input(int[10][10], int , int);
void array_2d_print(int[10][10], int , int);
int array_2D_max_index(int [10][10], int , int , int[]);

int main()

{
	int x[10][10],m,n,index[20],prime_count;
	
	cout<<"Enter an number : ";
	cin>>m; 
	cout<<"Enter an number : ";
	cin>>n;
	
	array_2d_input(x , m, n);
	array_2d_print(x , m, n);
	prime_count=array_2D_max_index(x,m,n,index);
	
	cout<<"sum of prime number : "<<prime_count<<endl;
	

	cout<<" is "<< x[index[0]][index[1]]<<" at location ";
	array_1D_print(index,2);
	
return 0;
	
}





void array_2d_input(int x[10][10], int m, int n){
	
	int i,j;
	
	for(i=0; i<m; i++){
		for(j=0; j<n; j++){
			cout<<"num [ "<<i<<" "<<j<<" ] =";
			cin>>x[i][j];
		}
	}
}




void array_2d_print(int x[10][10], int m, int n){
	
	int i,j;
	
	for(i=0; i<m; i++){
		for(j=0; j<n; j++){
			cout<<x[i][j]<<" ";
		}
		cout<<endl;
	}
}

int array_2D_max_index(int x[10][10], int m, int n, int ind[]){
    
    
	 int i, j, k, ind1, ind2, primr_count,prime;
    prime=0;  
    ind1=0;
    ind2=1;
    primr_count=0;
    for(i=0; i<m; i=i+1){
        for(j=0; j<n; j=j+1){

            prime=0;
            if(x[i][j]==0 || x[i][j]==1){
                prime=1;
            }
            else{
                for(k=2; k<x[i][j]; k=k+1){

                    if(x[i][j]%k==0){
                        prime=1;
                    }
                }
            }

            if(prime==0){
                ind[ind1]=i;
                ind[ind2]=j;

                primr_count=primr_count+1;

                ind1=ind2+1;
                ind2=ind1+1;
            }
        }
    }
   return primr_count; 
}


void array_1D_print(int a[], int input_size){
    int i;
    
    for(i=0; i < input_size; i = i + 1){
        cout << a[i] << " ";
    }
}

